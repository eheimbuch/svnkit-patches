# HG changeset patch
# Parent 349b712beec7b3f106cf9c9802225185d43cf5ba

diff -r 349b712beec7 svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/CollectionRenderer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/CollectionRenderer.java	Fri Nov 08 11:22:35 2013 +0100
@@ -0,0 +1,38 @@
+/*
+ * ====================================================================
+ * Copyright (c) 2004-2008 TMate Software Ltd.  All rights reserved.
+ *
+ * This software is licensed as described in the file COPYING, which
+ * you should have received as part of this distribution.  The terms
+ * are also available at http://svnkit.com/license.html.
+ * If newer versions of this license are posted there, you may use a
+ * newer version instead, at your option.
+ * ====================================================================
+ */
+
+
+
+package org.tmatesoft.svn.core.internal.server.dav;
+
+//~--- non-JDK imports --------------------------------------------------------
+
+import org.tmatesoft.svn.core.SVNException;
+
+/**
+ * @author Sebastian Sdorra
+ */
+public interface CollectionRenderer
+{
+
+  /**
+   * Render html for collection.
+   *
+   *
+   * @param builder
+   * @param resource
+   *
+   * @throws SVNException
+   */
+  public void renderCollection(StringBuilder builder, DAVResource resource)
+    throws SVNException;
+}
diff -r 349b712beec7 svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/DAVConfig.java
--- a/svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/DAVConfig.java	Sat Sep 28 12:09:29 2013 +0200
+++ b/svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/DAVConfig.java	Fri Nov 08 11:22:35 2013 +0100
@@ -55,6 +55,7 @@
     private boolean myIsAutoVersioning = false;
     private boolean myIsAllowBulkUpdates = false;
     private boolean myIsAllowDepthInfinity = false;
+    private CollectionRenderer collectionRenderer;
 
     public DAVConfig()
     {
@@ -182,4 +183,11 @@
         return myIsAllowBulkUpdates;
     }
 
+    public CollectionRenderer getCollectionRenderer(){
+        if ( collectionRenderer == null ){
+            collectionRenderer = new DefaultCollectionRenderer();
+        }
+        return collectionRenderer;
+    }
+
 }
diff -r 349b712beec7 svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/DefaultCollectionRenderer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/DefaultCollectionRenderer.java	Fri Nov 08 11:22:35 2013 +0100
@@ -0,0 +1,88 @@
+/*
+ * ====================================================================
+ * Copyright (c) 2004-2008 TMate Software Ltd.  All rights reserved.
+ *
+ * This software is licensed as described in the file COPYING, which
+ * you should have received as part of this distribution.  The terms
+ * are also available at http://svnkit.com/license.html.
+ * If newer versions of this license are posted there, you may use a
+ * newer version instead, at your option.
+ * ====================================================================
+ */
+
+
+package org.tmatesoft.svn.core.internal.server.dav;
+
+import org.tmatesoft.svn.core.SVNDirEntry;
+import org.tmatesoft.svn.core.SVNException;
+import org.tmatesoft.svn.core.SVNNodeKind;
+import org.tmatesoft.svn.core.internal.util.SVNPathUtil;
+import org.tmatesoft.svn.util.Version;
+
+import java.util.Iterator;
+
+/**
+ * @author Sebastian Sdorra
+ */
+public class DefaultCollectionRenderer implements CollectionRenderer
+{
+
+  @Override
+  public void renderCollection(StringBuilder buffer, DAVResource resource) throws SVNException {
+    startBody(SVNPathUtil.tail(resource.getResourceURI().getContext()), resource.getResourceURI().getPath(), resource.getRevision(), buffer);
+    addUpperDirectoryLink(resource.getResourceURI().getContext(), resource.getResourceURI().getPath(), buffer);
+    addDirectoryEntries(resource, buffer);
+    finishBody(buffer);
+  }
+
+  private void startBody(String contextComponent, String path, long revision, StringBuilder buffer) {
+    buffer.append("<html><head><title>");
+    buffer.append(contextComponent);
+    buffer.append(" - Revision ");
+    buffer.append(String.valueOf(revision));
+    buffer.append(": ");
+    buffer.append(path);
+    buffer.append("</title></head>\n");
+    buffer.append("<body>\n<h2>");
+    buffer.append(contextComponent);
+    buffer.append(" - Revision ");
+    buffer.append(String.valueOf(revision));
+    buffer.append(": ");
+    buffer.append(path);
+    buffer.append("</h2>\n <ul>\n");
+  }
+
+  private void addUpperDirectoryLink(String context, String path, StringBuilder buffer) {
+    if (!"/".equals(path)) {
+      buffer.append("<li><a href=\"");
+      buffer.append(context);
+      String parent = DAVPathUtil.removeTail(path, true);
+      buffer.append("/".equals(parent) ? "" : parent);
+      buffer.append("/");
+      buffer.append("\">..</a></li>\n");
+    }
+  }
+
+  private void addDirectoryEntries(DAVResource resource, StringBuilder buffer) throws SVNException {
+    for (Iterator iterator = resource.getEntries().iterator(); iterator.hasNext();) {
+      SVNDirEntry entry = (SVNDirEntry) iterator.next();
+      boolean isDir = entry.getKind() == SVNNodeKind.DIR;
+      buffer.append("<li><a href=\"");
+      buffer.append(resource.getResourceURI().getContext());
+      buffer.append("/".equals(resource.getResourceURI().getPath()) ? "" : resource.getResourceURI().getPath());
+      buffer.append(DAVPathUtil.standardize(entry.getName()));
+      buffer.append(isDir ? "/" : "");
+      buffer.append("\">");
+      buffer.append(entry.getName());
+      buffer.append(isDir ? "/" : "");
+      buffer.append("</a></li>\n");
+    }
+  }
+
+  private void finishBody(StringBuilder buffer) {
+    buffer.append("</ul><hr noshade><em>");
+    buffer.append("Powered by ");
+    buffer.append(Version.getVersionString());
+    buffer.append("</em>\n</body></html>");
+  }
+}
diff -r 349b712beec7 svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/handlers/DAVGetHandler.java
--- a/svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/handlers/DAVGetHandler.java	Sat Sep 28 12:09:29 2013 +0200
+++ b/svnkit-dav/src/main/java/org/tmatesoft/svn/core/internal/server/dav/handlers/DAVGetHandler.java	Fri Nov 08 11:22:35 2013 +0100
@@ -75,8 +75,8 @@
             }
 
             if (resource.isCollection()) {
-                StringBuffer body = new StringBuffer();
-                generateResponseBody(resource, body);
+                StringBuilder body = new StringBuilder();
+                getConfig().getCollectionRenderer().renderCollection(body, resource);
                 String responseBody = body.toString();
 
                 try {
@@ -151,62 +151,4 @@
             setResponseHeader(ETAG_HEADER, eTag);
         }
     }
-
-    private void generateResponseBody(DAVResource resource, StringBuffer buffer) throws SVNException {
-        startBody(SVNPathUtil.tail(resource.getResourceURI().getContext()), resource.getResourceURI().getPath(), resource.getRevision(), buffer);
-        addUpperDirectoryLink(resource.getResourceURI().getContext(), resource.getResourceURI().getPath(), buffer);
-        addDirectoryEntries(resource, buffer);
-        finishBody(buffer);
-    }
-
-    private void startBody(String contextComponent, String path, long revision, StringBuffer buffer) {
-        buffer.append("<html><head><title>");
-        buffer.append(contextComponent);
-        buffer.append(" - Revision ");
-        buffer.append(String.valueOf(revision));
-        buffer.append(": ");
-        buffer.append(path);
-        buffer.append("</title></head>\n");
-        buffer.append("<body>\n<h2>");
-        buffer.append(contextComponent);
-        buffer.append(" - Revision ");
-        buffer.append(String.valueOf(revision));
-        buffer.append(": ");
-        buffer.append(path);
-        buffer.append("</h2>\n <ul>\n");
-    }
-
-    private void addUpperDirectoryLink(String context, String path, StringBuffer buffer) {
-        if (!"/".equals(path)) {
-            buffer.append("<li><a href=\"");
-            buffer.append(context);
-            String parent = DAVPathUtil.removeTail(path, true);
-            buffer.append("/".equals(parent) ? "" : parent);
-            buffer.append("/");
-            buffer.append("\">..</a></li>\n");
-        }
-    }
-
-    private void addDirectoryEntries(DAVResource resource, StringBuffer buffer) throws SVNException {
-        for (Iterator iterator = resource.getEntries().iterator(); iterator.hasNext();) {
-            SVNDirEntry entry = (SVNDirEntry) iterator.next();
-            boolean isDir = entry.getKind() == SVNNodeKind.DIR;
-            buffer.append("<li><a href=\"");
-            buffer.append(resource.getResourceURI().getContext());
-            buffer.append("/".equals(resource.getResourceURI().getPath()) ? "" : resource.getResourceURI().getPath());
-            buffer.append(DAVPathUtil.standardize(entry.getName()));
-            buffer.append(isDir ? "/" : "");
-            buffer.append("\">");
-            buffer.append(entry.getName());
-            buffer.append(isDir ? "/" : "");
-            buffer.append("</a></li>\n");
-        }
-    }
-
-    private void finishBody(StringBuffer buffer) {
-        buffer.append("</ul><hr noshade><em>");
-        buffer.append("Powered by ");
-        buffer.append(Version.getVersionString());
-        buffer.append("</em>\n</body></html>");
-    }
 }
